values_drop_na = TRUE
) %>%
mutate(
key = stringr::str_replace(key, "newrel", "new_rel")
) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1)
?separate()
who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = TRUE
) %>%
mutate(
key = stringr::str_replace(key, "newrel", "new_rel")
) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1, convert = TRUE)
#Use the gapminder dataset to answer the following questions:
# 1. How many unique countries are included in the dataset?
library(gapminder)
#Use the gapminder dataset to answer the following questions:
# 1. How many unique countries are included in the dataset?
install.packages("gapmider")
#Use the gapminder dataset to answer the following questions:
# 1. How many unique countries are included in the dataset?
install.packages("gapminder")
library(gapminder)
gapminder
library(gaominder)
library(gapminder)
names(gapminder)
library(tidyverse)
unique(gapminder$country)
gapminder %>%
group_by(country) %>%
summarise(max(gdpPercap), min(gdpPercap))
gapminder %>%
arrange(gdpPercap) %>%
select(country, gdpPercap)
gapminder %>%
arrange(desc(gdpPercap)) %>%
select(country, gdpPercap)
View(gapminder)
gapminder %>%
group_by(country, year) %>%
summarise(mean(lifeExp))
gapminder %>%
group_by(continent) %>%
summarise(mean(lifeExp))
gapminder %>%
group_by(continent) %>%
summarise(mean(lifeExp)) -> region_lifeexp
region_lifeexp
gapminder %>%
filter(year %in% c( 1952, 1962, 1972, 1982, 1992, 2002))
gapminder %>%
filter(year %in% c( 1952, 1962, 1972, 1982, 1992, 2002)) %>%
group_by(continent, year)
gapminder %>%
filter(year %in% c( 1952, 1962, 1972, 1982, 1992, 2002)) %>%
group_by(continent, year) %>%
summarise(mean(lifeExp))
gapminder %>%
filter(year %in% c( 1952, 1962, 1972, 1982, 1992, 2002))
gapminder %>%
filter(year %in% c( 1952, 1962, 1972, 1982, 1992, 2002)) %>%
ggplot(aes(x = continent))+
geom_bar()
gapminder %>%
ggplot(aes(x = continent, y = gdpPercap))+
geom_boxplot()
gapminder %>%
select(lifeExp, gdpPercap) %>%
corr()
?corr()
?cor()
gapminder %>%
select(lifeExp, gdpPercap) %>%
cor()
gapminder %>%
group_by(continent) %>%
summarise(cor(lifeExp, gdpPercap))
gapminder %>%
ggplot(aes(lifeExp, gdpPercap))+
geom_point()
gapminder %>%
ggplot(aes(lifeExp, gdpPercap))+
geom_point(aes(group = continent))
gapminder %>%
ggplot(aes(lifeExp, gdpPercap))+
geom_point(aes(col = continent))
gapminder %>%
ggplot(aes(log(lifeExp), log(gdpPercap)))+
geom_point(aes(col = continent))
gapminder %>%
ggplot(aes(log(lifeExp), log(gdpPercap)))+
geom_point()+
facet_grid(~continent)
gapminder %>%
ggplot(aes(lifeExp, gdpPercap))+
geom_point()+
facet_grid(~continent)
gapminder %>%
ggplot(aes(gdpPercap, lifeExp))+
geom_point()+
facet_grid(~continent)
gapminder %>%
group_by(year,  continent) %>%
summarise(cor(lifeExp, gdpPercap))
gapminder %>%
group_by(continent, year) %>%
summarise(cor(lifeExp, gdpPercap))
gapminder %>%
filter(country == "India")
?geom_line
gapminder %>%
filter(country == "India") %>%
ggplot(aes(x = year))+
geom_line(aes(y = log(lifeExp)))
gapminder %>%
filter(country == "India") %>%
ggplot(aes(x = year))+
geom_line(aes(y = log(lifeExp)))+
geom_line(aes(y = log(gdpPercap)))
gapminder %>%
filter(country == "India") %>%
ggplot(aes(x = year))+
geom_line(aes(y = log(lifeExp)), col = "red")+
geom_line(aes(y = log(gdpPercap)))
iris
getwd()
write.csv(iris, "iris.csv")
84/28
library(AER)
data(Journals)
Journals
library(tidyverse)
Journals %>%
select(subs, price, citations, citeprice = price/citations)
Journals %>%
select(subs, price, citations) %>%
mutate(citeprice = price/citations)
Journals %>%
select(subs, price, citations) %>%
mutate(citeprice = price/citations) %>%
as_tibble()
journals1 <- Journals %>%
select(subs, price, citations) %>%
mutate(citeprice = price/citations) %>%
as_tibble()
mean(journals1$citeprice)
journals1 %>%
ggplot(aes(subs, citeprice))+
geom_point()
journals1 %>%
ggplot(aes(log(subs), log(citeprice)))+
geom_point()
# linear model
linear_model_1 <- lm(log(subs) ~ log(citeprice), data = journals1)
linear_model_1
summary(linear_model_1)
anova(linear_model_1)
journals1 %>%
ggplot(aes(subs)) %>%
geom_histogram()
?geom_histogram(stat = "")
journals1 %>%
ggplot(aes(subs)) +
geom_histogram()
# checking skewness
journals1 %>%
ggplot(aes(subs)) +
geom_freqpoly()
journals1 %>%
ggplot(aes(log(subs))) +
geom_freqpoly()
journals1 %>%
ggplot(aes(citeprice)) +
geom_freqpoly()
journals1 %>%
ggplot(aes(log(citeprice))) +
geom_freqpoly()
journals1 %>%
ggplot(aes(log(citeprice))) +
geom_freqpoly(bins = 100) # positively skewed
journals1 %>%
ggplot(aes(log(citeprice))) +
geom_freqpoly(bins = 1000) # positively skewed
journals1 %>%
ggplot(aes(log(citeprice))) +
geom_freqpoly(bins = 5) # positively sk0ewed
# checking skewness
journals1 %>%
ggplot(aes(subs)) +
geom_freqpoly(bins = 5)
journals1 %>%
ggplot(aes(log(subs))) +
geom_freqpoly(bins = 5)
journals1 %>%
ggplot(aes(citeprice)) +
geom_freqpoly(bins = 5)
journals1 %>%
ggplot(aes(log(citeprice))) +
geom_freqpoly(bins = 5) # positively sk0ewed
summary(linear_model_1)
anova(linear_model_1)
?anova()
library(sf)
districts_shp <- read_sf("DISTRICT_BOUNDARY.shp")
names(districts_shp)
setwd("C:/Users/pravesh/Desktop/Project2023-24")
districts_shp <- read_sf("DISTRICT_BOUNDARY.shp")
names(districts_shp)
plot(districts_shp$geometry)
districts_names_shp <- districts_shp$District
districts_names_shp
districts_names_nsso <- readxl::read_excel("master_dataset.xlsx", sheet = "district_name")
districts_names_nsso
districts_nsso <- readxl::read_excel("master_dataset.xlsx", sheet = "district_name")
districts_names_nsso <- districts_nsso$`District Name`
districts_names_shp
library(tidyverse)
districts_names_shp %>%
arrange()
districts_names_shp %>%
as_tibble()
districts_names_shp %>%
as_tibble() %>%
rename(names = value)
districts_names_shp %>%
as_tibble() %>%
rename(names = value) %>%
arrange(names)
districts_names_shp %>%
as_tibble() %>%
rename(names = value) %>%
arrange(names) %>%
mutate(names_clean = str_replace_all(">", "A") )
districts_names_shp %>%
as_tibble() %>%
rename(names = value) %>%
arrange(names) %>%
str_replace_all(">", "A") )
?str_replace_all
districts_names_shp %>%
as_tibble() %>%
rename(names = value) %>%
arrange(names) %>%
str_replace_all(names, ">", "A") )
districts_names_shp %>%
as_tibble() %>%
rename(names = value) %>%
arrange(names) %>%
str_replace_all(names[1], ">", "A") )
districts_names_shp %>%
as_tibble() %>%
rename(names = value) %>%
arrange(names) -> t
str_replace_all(t$names[1], ">", "A") )
str_replace_all(t$names[1], ">", "A")
for i in 1:nrow(t){
for (i in 1:nrow(t)){
t$names_cleaned <- str_replace_all(t$names[i], ">", "A")
}
t
print()
print(x)
print(x[i])
}
x[i] = str_replace_all(t$names[i], ">", "A")
t$names_cleaned[i] = str_replace_all(t$names[i], ">", "A")
for (i in 1:nrow(t)){
t$names_cleaned[i] = str_replace_all(t$names[i], ">", "A")
}
t
}
for (i in 1:nrow(t)){
t$names_cleaned[i] = str_replace_all(t$names[i], c'(">", "|"), c("A", "I"))
}
for (i in 1:nrow(t)){
t$names_cleaned[i] = str_replace_all(t$names[i], c(">", "|"), c("A", "I"))
}
t
warnings()
for (i in 1:nrow(t)){
t$names_cleaned[i] = str_replace(t$names[i], c(">", "|"), c("A", "I"))
}
t
for (i in 1:nrow(t)){
t$names_cleaned[i] = str_replace_all(t$names[i], c(">" = "A", "|" =  "I"))
}
t
?mgsub
library(mgsub)
?mgsub
for (i in 1:nrow(t)){
t$names_cleaned[i] = mgsub::mgsub(t$names[i], c(">", "|"), replacement = c("A","I"))
}
t
for (i in 1:nrow(t)){
t$names_cleaned[i] = mgsub::mgsub(t$names[i], c(">", "|"), replacement = c("A"))
}
t
t$names_cleaned[i] = mgsub::mgsub(t$names[i], c(">"), replacement = c("A"))
t
for (i in 1:nrow(t)){
t$names_cleaned[i] = mgsub::mgsub(t$names[i], c(">"), replacement = c("A"))
}
t
districts_names_shp <- districts_shp$District
districts_names_shp
?gsub
?mgsub
for (i in 1:nrow(t)){
t$names_cleaned[i] = mgsub::mgsub(string = t$names[i],
pattern = c(">", "\\|"), replacement = c("A", "I"))
}
t
for (i in 1:nrow(t)){
grepl(“[^A-Za-z0-9 ]”, t$names_cleaned)
?grepl
for (i in 1:nrow(t)){
grepl(“[^A-Za-z0-9 ]”, t$names_cleaned[i])
for (i in 1:nrow(t)){
grepl(“[^A-Za-z0-9]”, t$names_cleaned[i])
for (i in 1:nrow(t)){
grepl('[[:punct:]]', t$names_cleaned[i])
print()
}
for (i in 1:nrow(t)){
grepl('[[:punct:]]', x = t$names_cleaned[i])
print()
}
for (i in 1:nrow(t)){
grepl(pattern = '[[:punct:]]', x = t$names_cleaned[i])
}
for (i in 1:nrow(t)){
grepl(pattern = '[[:punct:]]', x = t$names_cleaned[i])
print()
}
for (i in 1:nrow(t)){
t$punc <- grepl(pattern = '[[:punct:]]', x = t$names_cleaned[i])
}
t
tab(t)
table(t)
for (i in 1:nrow(t)){
t$names_cleaned[i] = mgsub::mgsub(string = t$names[i],
pattern = c(">", "\\|", "\\@"), replacement = c("A", "I", "U"))
}
t
for (i in 1:nrow(t)){
t$punc <- grepl(pattern = '[[:punct:]]', x = t$names[i])
}
t
districts_names_shp %>%
as_tibble() %>%
rename(names = value) %>%
arrange(names) -> districts_names_shp_1
# clean the data
for (i in 1:nrow(districts_names_shp_1)){
districts_names_shp_1$names_cleaned[i] = mgsub::mgsub(sdistricts_names_shp_1ring = districts_names_shp_1$names[i],
pattern = c(">", "\\|", "\\@"), replacement = c("A", "I", "U"))
}
# clean the data
for (i in 1:nrow(districts_names_shp_1)){
districts_names_shp_1$names_cleaned[i] = mgsub::mgsub(string = districts_names_shp_1$names[i],
pattern = c(">", "\\|", "\\@"), replacement = c("A", "I", "U"))
}
districts_names_shp_1
?match()
districts_names_nsso <- districts_nsso$`District Name` %>%
str_to_upper(locale = "en")
districts_names_nsso
match(districts_names_shp_1$names_cleaned, districts_nsso$`District Name` )
districts_names_nsso <- districts_nsso$`District Name` %>%
str_to_upper(locale = "en") %>% arrange(`District Name`)
districts_names_nsso
districts_names_nsso <- districts_nsso$`District Name` %>%
str_to_upper(locale = "en") %>% arrange()
districts_names_nsso <- districts_nsso$`District Name` %>%
str_to_upper(locale = "en") %>% class()
districts_nsso$`District Name` %>%
str_to_upper(locale = "en") %>% class()
districts_names_nsso <- districts_nsso$`District Name` %>%
str_to_upper(locale = "en") %>% arrange_all()
districts_names_nsso <- districts_nsso$`District Name` %>%
str_to_upper(locale = "en")
districts_names_nsso
?sort
sort(c("a", "x", "b", "p"))
districts_names_nsso <- districts_nsso$`District Name` %>%
str_to_upper(locale = "en") %>% sort()
districts_names_nsso
match(districts_names_shp_1$names_cleaned, districts_names_nsso )
}
}
for (i in 1:nrow(districts_names_shp_1)){
for (j in 1:nrow(districts_names_nsso)){
districts_names_shp_1$final_district[i] <- if_else(districts_names_shp_1[i] %in% districts_names_nsso[j],
districts_names_shp_1[i],
"No")
}
}
# read the shape file
library(sf)
districts_shp <- read_sf("DISTRICT_BOUNDARY.shp")
names(districts_shp)
library(tidyverse)
# arrange the districts alphabetically
districts_shp <- districts_shp |>
arrange(District)
# clean the data
for (i in 1:nrow(districts_shp)){
districts_shp$district[i] =
mgsub::mgsub(string = districts_shp$District[i],
pattern = c(">", "\\|", "\\@"),
replacement = c("A", "I", "U"))
}
shp_districts <- districts_shp |> select(district, geometry)
# read the nsso data
districts_nsso_raw <-
readr::read_tsv("master_dataset.txt")
# read the nsso data
districts_nsso_raw <-
readr::read_tsv("master_dataset.txt")
# data cleaning
a <- districts_nsso_raw |>
rename(district = `District name`,
wpi = WPI_multiplicative,
resource = RESOURCE,
access = Access,
use = USE,
capacity = Capacity,
environment = Environment,
wpi_pca = WPI_pca) |>
mutate(sector = as.factor(sector)) |>
arrange(district) |>
# remove #N/A string in district
filter(!(district %in% "#N/A")) |>
# change the names to upper case
mutate(district = str_to_upper(string = district, locale = "en"))
# data cleaning
a <- districts_nsso_raw |>
rename(district = `District name`,
wpi = WPI_multiplicative,
resource = RESOURCE,
access = Access,
use = USE,
capacity = Capacity,
environment = Environment,
wpi_pca = WPI_pca) |>
mutate(Sector = as.factor(Sector)) |>
arrange(district) |>
# remove #N/A string in district
filter(!(district %in% "#N/A")) |>
# change the names to upper case
mutate(district = str_to_upper(string = district, locale = "en"))
a |>
group_by(district, sector) |>
summarise_at(vars(resource:wpi_pca), median)
a |>
group_by(district, Sector) |>
summarise_at(vars(resource:wpi_pca), median)
# by sector
nsso_districts_sector <- a |>
group_by(district, Sector) |>
summarise_at(vars(resource:wpi_pca), median)
# read the shape file
library(sf)
districts_shp <- read_sf("DISTRICT_BOUNDARY.shp")
library(tidyverse)
# arrange the districts alphabetically
districts_shp <- districts_shp |>
arrange(District)
# clean the data
for (i in 1:nrow(districts_shp)){
districts_shp$district[i] =
mgsub::mgsub(string = districts_shp$District[i],
pattern = c(">", "\\|", "\\@"),
replacement = c("A", "I", "U"))
}
shp_districts <- districts_shp |> select(district, geometry)
# read the nsso data
districts_nsso_raw <-
readr::read_tsv("master_dataset.txt")
# data cleaning
a <- districts_nsso_raw |>
rename(district = `District name`,
wpi = WPI_multiplicative,
resource = RESOURCE,
access = Access,
use = USE,
capacity = Capacity,
environment = Environment,
wpi_pca = WPI_pca) |>
mutate(Sector = as.factor(Sector)) |>
arrange(district) |>
# remove #N/A string in district
filter(!(district %in% "#N/A")) |>
# change the names to upper case
mutate(district = str_to_upper(string = district, locale = "en"))
nsso_districts <- a |>
group_by(district) |>
summarise_at(vars(resource:wpi_pca), median)
# merging
final_districts <- left_join(nsso_districts, shp_districts, by = "district")
