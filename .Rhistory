library(haven)
# import the data
library(haven)
d1 <- read_dta("R76120L01-Identification of sample household.dta")
View(d1)
d2 <- read_dta("R76120L02-Demographic and other particulars of household members.dta")
?read_dta()
# Load the Iris dataset
data(iris)
# Standardize the data
scaled_data <- scale(iris[, 1:4])
# Perform PCA
pca_result <- prcomp(scaled_data)
# View the summary of PCA
summary(pca_result)
# Access the loadings (weights)
loadings_matrix <- pca_result$rotation
loadings_matrix
# Plot the scree plot to visualize the proportion of variance explained by each PC
plot(pca_result, type = "l", main = "Scree Plot")
# Biplot to visualize both loadings and scores
biplot(pca_result)
install.packages("factoextra")
# install.packages("factoextra")
library(factoextra)
# Step 1: Calculate principal components
data(iris)
iris_pca <- prcomp(iris, scale = TRUE)
iris_pca <- prcomp(iris, scale. = TRUE)
# Step 1: Calculate principal components
data(iris)
# Step 1: Calculate principal components
data(iris)
#-----------------------------------
# Load the Iris dataset
data(iris)
# Step 1: Calculate principal components
data(iris)
iris_pca <- prcomp(iris, scale = TRUE)
iris_pca <- prcomp(iris, scale. = TRUE)
?prcomp()
iris_pca <- prcomp(iris[, 1:4], scale = TRUE)
iris_pca
names(iris_pca)
summary(iris_pca)
# Step 2: Ideal number of components
fviz_eig(iris_pca, addlabels = TRUE)
# Step 2: Ideal number of components
library(factoextra)
fviz_eig(iris_pca, addlabels = TRUE)
# Step 3: biplot
fviz_pca_biplot(iris_pca)
# Step 3: biplot
fviz_pca_biplot(iris_pca, label = "")
# Step 3: biplot
fviz_pca_biplot(iris_pca, label = "var")
# Step 3: biplot
fviz_pca_biplot(iris_pca, label = "var",
habillage = iris$Species)
# Step 2: Ideal number of components
library(factoextra)
fviz_eig(iris_pca, addlabels = TRUE)
# Step 3: biplot
fviz_pca_biplot(iris_pca, label = "var",
habillage = iris$Species)
names(iris_pca)
summary(iris_pca)
iris_pca$rotation
irids
iris
fviz_pca_biplot(iris_pca, label = "var")
summary(iris_pca)
iris_pca
iris_pca$rotation
# Access the unnormalized weights (loadings) for each principal component
weights_unnormalized <- pca_result$rotation
# Access the unnormalized weights (loadings) for each principal component
weights_unnormalized <- iris_pca$rotation
# Normalize the weights using the custom function
weights_normalized <- scale(weights_unnormalized, scale = FALSE) / sqrt(rowSums(weights_unnormalized^2))
weights_normalized
round(weights_normalized, 2)
round(weights_normalized, 1)
round(weights_normalized, 0)
round(weights_normalized, 3)
weights_normalized[1]
weights_normalized[1:4]
sum(weights_normalized[1:4])
scipen(999)
options(scipen = 999)
sum(weights_normalized[1:4])
class(weights_normalized)
dim(weights_normalized)
colSums(weights_normalized)
sum(c(0.1718189, -0.6185945,  0.2311661,  0.2156095))
0.17+0.23+0.21-0.61
0.17+0.23+0.21+0.61
28+32+58+3
weights_normalized
weights_unnormalized / rowSums(weights_unnormalized)
weights_unnormalized / colSums(weights_unnormalized)
